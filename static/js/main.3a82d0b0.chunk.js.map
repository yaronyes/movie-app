{"version":3,"sources":["data-model/ActorModel.js","components/Actor.js","components/ActorsView.js","utils/utils.js","data-model/MovieModel.js","components/Movie.js","components/MoviesGallery.js","components/HomePage.js","components/HeaderNav.js","App.js","serviceWorker.js","index.js"],"names":["ActorModel","id","firstName","lastName","birthday","imageUrl","imdbLink","this","Date","moment","fromNow","split","Actor","props","actor","history","useHistory","Card","className","onClick","push","Img","variant","src","Body","href","target","rel","Title","Text","Age","ActorsView","actors","onActorSelected","useState","filter","setFilter","sortingValue","setSortingValue","filteredActors","toUpperCase","trim","includes","sort","a","b","compare","actorComp","map","Col","key","lg","md","sm","Container","Row","Navbar","Form","inline","Control","type","value","onChange","e","placeholder","as","loadActors","axios","get","console","log","api_key","searchActorAndGetId","actorName","url","res","data","results","getMoviesForActor","getMovie","getMovieCredits","getPerson","MovieModel","name","poster","populate","movie","length","runtime","credits","result","crew","find","job","director","directorData","imdb_id","cast","character","order","mainStars","i","actorData","message","Movie","extraData","setExtraData","cursor","setCursor","getMovieData","Accordion","Toggle","Header","eventKey","Collapse","ListGroup","Item","MoviesGallery","useParams","moviesForActor","setMoviesForActor","loadData","tmdbID","response","actorMovies","title","poster_path","useEffect","HomePage","alt","style","margin","width","height","HeaderNav","collapseOnSelect","expand","bg","Brand","aria-controls","Nav","Link","App","setActors","jsonActors","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3a82d0b0.chunk.js","sourcesContent":["import moment from 'moment'\r\n\r\nclass ActorModel {\r\n    constructor({id, firstName, lastName, birthday, imageUrl, imdbLink}) {\r\n        this.id = id;\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n        this.birthday = new Date(birthday);\r\n        this.imageUrl = imageUrl;\r\n        this.imdbLink = imdbLink;\r\n    }\r\n\r\n    Age() {\r\n        return moment(this.birthday, \"YYYY-MM-DD\").fromNow().split(\" \")[0];\r\n    }\r\n}\r\n\r\n\r\nexport default ActorModel;","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport './Actor.css'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// This component draws card with image, name and age of an actor\r\n// Props:\r\n// actor - ActorModel object - (e.g new ActorModel(1, \"Jack\", \"Nicholson\", \"1937-04-22\", \"https://m.media-amazon.com/images/M/MV5BMTQ3OTY0ODk0M15BMl5BanBnXkFtZTYwNzE4Njc4._V1_.jpg\", \"https://www.imdb.com/name/nm0000197\"))\r\nconst Actor = props => {\r\n    const { actor } = props;\r\n    const history = useHistory();\r\n\r\n\r\n    return (\r\n        <Card className=\"h-100\" onClick={() => history.push(`/actor/${actor.id}/movies`)}>\r\n            <Card.Img className=\"img-fluid\" variant=\"top\" src={actor.imageUrl} />\r\n            <Card.Body className=\"card-bg\">            \r\n            <a href={actor.imdbLink} target=\"_blank\" rel=\"noopener noreferrer\"><Card.Title>{`${actor.firstName} ${actor.lastName}`}</Card.Title></a>\r\n                <Card.Text className=\"h-25\">\r\n                Age: {actor.Age()}\r\n                </Card.Text>\r\n            </Card.Body>           \r\n        </Card>\r\n    );\r\n}\r\n\r\n\r\nexport default Actor;","import React, { useState } from 'react';\r\nimport { Row, Col, Form, Navbar, Container } from 'react-bootstrap';\r\nimport Actor from './Actor';\r\nimport './ActorsView.css';\r\n\r\nconst ActorsView = props => {\r\n    const { actors, onActorSelected } = props;\r\n    const [filter, setFilter] = useState(\"\");\r\n    const [sortingValue, setSortingValue] = useState(\"none\");\r\n    \r\n    const compare = (a, b) => {\r\n        if (a < b) {\r\n          return -1;\r\n        }\r\n        if (a > b) {\r\n          return 1;\r\n        }\r\n        \r\n        return 0;\r\n      }\r\n    \r\n    const filteredActors = actors.filter(({firstName, lastName}) => (`${firstName.toUpperCase()} ${lastName.toUpperCase()}`).trim().includes(filter.toUpperCase().trim()));\r\n    if(sortingValue !== \"\" || sortingValue === \"none\") {\r\n        filteredActors.sort((a, b) => (sortingValue === 'age') ? a.Age() - b.Age() : compare(a[sortingValue], b[sortingValue]));\r\n    }    \r\n    const actorComp = filteredActors.map(actor => <Col key={actor.id} lg={3} md={4} sm={6} className=\"actor\"><Actor actor={actor} onActorSelected={onActorSelected}/></Col>)\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"actors-view\">            \r\n                <header>\r\n                    <h1>Actors</h1>\r\n                </header>\r\n                <Row id=\"form-row\">                              \r\n                    <Navbar className=\"w-100\">                      \r\n                            <Row className=\"justify-content-between w-100\">\r\n                                <Col lg={10} sm={6}>\r\n                                    <Form inline className=\"w-100\">\r\n                                        <Form.Control type=\"text\" value={filter} onChange={e => setFilter(e.target.value)} placeholder=\"filter\" className=\"w-100\"/>                          \r\n                                    </Form>\r\n                                </Col>\r\n                                <Col lg={2} sm={6}>\r\n                                    <Form inline className=\"w-100\">\r\n                                        <Form.Control as=\"select\" value={sortingValue} onChange={e => setSortingValue(e.target.value)} className=\"ml-auto\" >\r\n                                                    <option value=\"none\">sort</option>\r\n                                                    <option value=\"firstName\">first name</option>\r\n                                                    <option value=\"lastName\">last name</option>\r\n                                                    <option value=\"age\">age</option>\r\n                                        </Form.Control>  \r\n                                    </Form>    \r\n                                </Col>                                        \r\n                            </Row>                                             \r\n                    </Navbar>                      \r\n                </Row>\r\n                <Row>\r\n                    {actorComp}\r\n                </Row>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\n\r\nexport default ActorsView;","import axios from 'axios';\r\n\r\nexport const loadActors = async () => {\r\n    try {\r\n        return await axios.get(\"actors.json\");    \r\n    } catch (e) {\r\n        console.log(e);\r\n    }    \r\n};\r\n\r\nconst api_key = '534b88fc1310cfa57ec88bf791f97edd';\r\n\r\nexport const searchActorAndGetId = async (actorName) => {\r\n    try {\r\n        const url = `https://api.themoviedb.org/3/search/person?api_key=${api_key}&language=en-US&query=${actorName}&page=1&include_adult=false`;\r\n        const res = await axios.get(url);\r\n        return res.data.results[0].id;\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\n\r\nexport const getMoviesForActor = async (id) => {\r\n    try {\r\n        const url = `https://api.themoviedb.org/3/person/${id}/movie_credits?api_key=${api_key}&language=en-US`;\r\n        return await axios.get(url);\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\n\r\nexport const getMovie = async (id) => {\r\n    try {\r\n        const url = `https://api.themoviedb.org/3/movie/${id}?api_key=${api_key}&language=en-US`;\r\n        return await axios.get(url);\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\n\r\nexport const getMovieCredits = async (id) => {\r\n    try {        \r\n        const url = `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${api_key}`;\r\n        return await axios.get(url);\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\n\r\nexport const getPerson = async (id) => {\r\n    try {        \r\n        const url = `https://api.themoviedb.org/3/person/${id}?api_key=${api_key}&language=en-US`;\r\n        return await axios.get(url);\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n};","import { getMovie, getMovieCredits, getPerson } from '../utils/utils.js';\r\n\r\n// class MovieModel represents a movie. the constructor receiving only three parameters.\r\n// the rest of the parameters gained when calling the populate method\r\nclass MovieModel {\r\n    constructor(id, name, poster) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.length = 0;\r\n        this.poster = `https://image.tmdb.org/t/p/w500${poster}`;\r\n        this.director = { name: \"\", imdb_id: \"\" };\r\n        this.mainStars = [];\r\n    }\r\n\r\n    populate = async () => {\r\n        try {\r\n            // getting the movie length\r\n            const movie = await getMovie(this.id);        \r\n            this.length = movie.data.runtime;\r\n\r\n            // getting the movie credits in order to get the director and the main stars \r\n            const credits = await getMovieCredits(this.id);\r\n            const result = credits.data.crew.find(crew => crew.job && crew.job === 'Director');\r\n            this.director.name = result.name;\r\n            \r\n            // getting the director imdb id\r\n            const directorData = await getPerson(result.id);\r\n            this.director.imdb_id = directorData.data.imdb_id;\r\n            \r\n            const actors = credits.data.cast.filter(cast => cast.character && cast.order < 5);\r\n            this.mainStars = actors.map(actor => ({ name: actor.name, imdb_id: \"\" }));        \r\n            \r\n            // getting the imdb id for each actor\r\n            for(let i = 0; i < actors.length; i++) {\r\n                const actorData = (await getPerson(actors[i].id)).data;\r\n                this.mainStars[i].imdb_id = actorData.imdb_id;                \r\n            }\r\n        } catch (e) {\r\n            console.log(e.message)\r\n        }                 \r\n        \r\n    }\r\n}\r\n\r\nexport default MovieModel;","import React, {useState}from 'react';\r\nimport { Card, Accordion, Col, Row, ListGroup } from 'react-bootstrap';\r\nimport './Movie.css';\r\n\r\n// This component draws Accordion with movie details\r\n// Props:\r\n// movie - MovieModel class\r\n// State:\r\n// extraData - object with extras movie data to gain upon opening the accordion\r\n// cursor - changing the cursor when fetching data\r\nconst Movie = (props) => {\r\n    const { movie } = props;    \r\n    const [extraData, setExtraData] = useState({\r\n        director: \"\",\r\n        mainStars: [],\r\n        length: 0\r\n    });\r\n    const [cursor, setCursor] = useState(\"pointer-cursor\")\r\n\r\n    // populate the movie with extra data upon opening the accordion\r\n    const getMovieData = async () => {        \r\n        if(!extraData.director) {\r\n            setCursor(\"wait-curser\");\r\n        \r\n            await movie.populate();\r\n    \r\n            setExtraData({\r\n                director:  <a href={`https://www.imdb.com/name/${movie.director.imdb_id}`} rel=\"noopener noreferrer\" target=\"_blank\">{movie.director.name}</a>,\r\n                mainStars: movie.mainStars.map((actor, i) => <span key={i}><a href={`https://www.imdb.com/name/${actor.imdb_id}`} rel=\"noopener noreferrer\" target=\"_blank\">{actor.name}</a>, </span>),\r\n                length: movie.length\r\n            });\r\n    \r\n            setCursor(\"pointer-cursor\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"comp-movie\">            \r\n            <Card onClick={getMovieData} className={cursor}>\r\n                <Accordion.Toggle as={Card.Header} eventKey={movie.id}>\r\n                {movie.name}\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={movie.id}>\r\n                    <Row className=\"acc-row\">\r\n                        <Col className=\"acc-col\" md={3}>\r\n                            <Card.Img src={movie.poster} className=\"w-100\"/>\r\n                        </Col>      \r\n                        <Col className=\"acc-col\" md={9}>                                                \r\n                            <ListGroup>\r\n                                <ListGroup.Item><span className=\"l-title\">Director: </span>{extraData.director}</ListGroup.Item>\r\n                                <ListGroup.Item><span className=\"l-title\">Main Stars: </span>{extraData.mainStars}</ListGroup.Item>\r\n                                <ListGroup.Item><span className=\"l-title\">Length: </span>{extraData.length} minutes</ListGroup.Item>\r\n                            </ListGroup>                                  \r\n                        </Col>      \r\n                    </Row>                                    \r\n                </Accordion.Collapse>\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Movie;","import React, {useState, useEffect}from 'react';\r\nimport { searchActorAndGetId, getMoviesForActor } from '../utils/utils';\r\nimport MovieModel from '../data-model/MovieModel';\r\nimport Movie from './Movie';\r\nimport { Accordion, Container } from 'react-bootstrap';\r\nimport './MoviesGallery.css';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n// this component draws a list with the all the movies for an actor.\r\n// Props:\r\n// actors - list of ActorModel\r\n// State:\r\n// list of movies for the actor\r\n// Params:\r\n// id - number - the id of the selected actor\r\nconst MoviesGallery = (props) => {\r\n    const { actors } = props;    \r\n    const { id } = useParams();\r\n    const [moviesForActor, setMoviesForActor] = useState([]);\r\n    console.log(id);\r\n\r\n    const loadData = async () =>  {\r\n        const tmdbID = await searchActorAndGetId(`${actors[id].firstName} ${actors[id].lastName}`);\r\n        if(tmdbID) {\r\n            const response = await getMoviesForActor(tmdbID);\r\n\r\n            const actorMovies = response.data.cast.map((movie, i) => <Movie key={i} movie={new MovieModel(movie.id, movie.title, movie.poster_path)}/>);\r\n            setMoviesForActor(actorMovies);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {             \r\n        if(id && (id >= 0 && id <= actors.length)) {\r\n            loadData();\r\n        }        \r\n    }, [id]);\r\n           \r\n    return (\r\n        <Container>\r\n            <div className=\"comp-m-gallery\">\r\n                <header>\r\n                    <h1>Movies</h1>\r\n                </header>\r\n                <Accordion className=\"test\">    \r\n                    {moviesForActor}              \r\n                </Accordion>            \r\n            </div>\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default MoviesGallery;","import React from 'react'\r\nimport { Container, Row } from 'react-bootstrap'\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <Row>\r\n                    <img src=\"https://images-na.ssl-images-amazon.com/images/I/41T3jlPA-tL._AC_.jpg\" alt=\"\" style={{ margin: \"auto\", width: \"100%\", height: \"100%\" }}/>\r\n                </Row>                \r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default HomePage;\r\n\r\n","import React from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n\r\nconst HeaderNav = () => {\r\n    return (\r\n        <div>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"#/\">Movie App</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#/actors\">Actors</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeaderNav;","import React, {useState, useEffect} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport ActorModel from './data-model/ActorModel';\r\nimport ActorsView from './components/ActorsView';\r\nimport {loadActors} from './utils/utils';\r\nimport MoviesGallery from './components/MoviesGallery';\r\nimport jsonActors from './data/actors.json';\r\nimport { HashRouter, Switch, Route } from 'react-router-dom';\r\nimport HomePage from './components/HomePage';\r\nimport HeaderNav from './components/HeaderNav';\r\n\r\nfunction App() {\r\n  const [actors, setActors] = useState([]);\r\n  // const [selectedActor, setSelectedActor] = useState();\r\n  \r\n  const loadData = async () =>  {\r\n    // trying so solve net::ERR_TOO_MANY_REDIRECTS error when trying to load actors.json\r\n    try {\r\n      const response = await loadActors(\"actors.json\");\r\n      setActors(response.data.map(actor => new ActorModel({ ...actor })));\r\n    } catch {\r\n      setActors(jsonActors.map(actor => new ActorModel({ ...actor })));\r\n    }        \r\n  }\r\n  \r\n  useEffect(() => {     \r\n    loadData();\r\n  }, []);\r\n   \r\n  return (\r\n    <HashRouter>\r\n      <HeaderNav/>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <HomePage/>\r\n        </Route>\r\n        <Route exact path=\"/actors\">\r\n          <ActorsView actors={actors}/>\r\n        </Route>\r\n        <Route exact path=\"/actor/:id/movies\">\r\n          {actors.length > 0 ? <MoviesGallery actors={actors}/> : null}\r\n        </Route>\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}